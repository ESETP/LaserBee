C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src\function_generator.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\markh\O
                    -neDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\src\function_generator.c OMF2 SMALL DEBUG OBJECTEXTEND ROM
                    -(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\mar
                    -kh\OneDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\inc;C:\Users\markh\OneDrive\Documents\Uni\4th Year\Eng
                    -\EE4\LaserBee\LaserBeeAudio\inc\config;C:\Users\markh\OneDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\inc
                    -\graphics;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8LB1/peripheral_driver/inc;C:/Silicon
                    -Labs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_joystick;C:/SiliconLabs/SimplicityStudio/v
                    -5/developer/sdks/8051/v4.2.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/EFM8LB
                    -1_SLSTK2030A/config;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_retargetseri
                    -al;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStud
                    -io/v5/developer/sdks/8051/v4.2.3//Device/EFM8LB1/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits
                    -/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/e
                    -fm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_memo
                    -ry_lcd/inc/config) PRINT(.\src\function_generator.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\function_generato
                    -r.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          ///////////////////////////////////////////////////////////////////////////////
   7          // function_generator.c
   8          ///////////////////////////////////////////////////////////////////////////////
   9          
  10          ///////////////////////////////////////////////////////////////////////////////
  11          // Call Graph
  12          //
  13          // FunctionGenerator_main()
  14          //  |
  15          //  +- drawSplash()
  16          //  |   +- getWaitJoystick()
  17          //  |   |   +- getJoystick()
  18          //  |
  19          //  +- drawStaticSprites()
  20          //  |   +- drawScreenSprite()
  21          //  |
  22          //  +- processInput()
  23          //  |   +- transitionDemoWaveform()
  24          //  |   +- transitionDemoFrequency()
  25          //  |
  26          //  +- drawScreen()
  27          //  |   +- drawScreenWaveform()
  28          //  |   +- drawScreenFrequency()
  29          //  |       +- drawScreenText()
  30          //  |
  31          //  +- synchFrame()
  32          //
  33          // Timer4_ISR()
  34          //
  35          // PORTMATCH_ISR()
  36          //
  37          
  38          ///////////////////////////////////////////////////////////////////////////////
  39          // Includes
  40          ///////////////////////////////////////////////////////////////////////////////
  41          
  42          #include "bsp.h"
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 2   

  43          #include "tick.h"
  44          #include "render.h"
  45          #include "joystick.h"
  46          #include "thinfont.h"
  47          #include "function_generator.h"
  48          #include "sine.h"
  49          #include "square.h"
  50          #include "triangle.h"
  51          #include "sawtooth.h"
  52          #include "windowed_sine.h"
  53          #include "nav_up.h"
  54          #include "nav_down.h"
  55          #include "nav_left.h"
  56          #include "nav_right.h"
  57          #include "waveform_tables.h"
  58          #include "retargetserial.h"
  59          
  60          
  61          ///////////////////////////////////////////////////////////////////////////////
  62          // Globals
  63          ///////////////////////////////////////////////////////////////////////////////
  64          
  65          //pins
  66          SI_SBIT(C1, SFR_P1, 4);
  67          SI_SBIT(D, SFR_P1, 5);
  68          SI_SBIT(Ds, SFR_P1, 6);
  69          
  70          
  71          #define NUM_KEYS 3
  72          
  73          // Demo state variables
  74          static DemoState currentDemoState = DEMO_SINE;
  75          static SI_VARIABLE_SEGMENT_POINTER(currentTable, uint16_t, const SI_SEG_CODE) = sineTable; // current wave
             -form table for DAC output
  76          static SI_VARIABLE_SEGMENT_POINTER(currentWaveform, uint8_t, const SI_SEG_CODE) = sine_bits; // current wa
             -veform picture
  77          
  78          // Frequency selection
  79          #define SUPPORTED_NUM_FREQ 8
  80          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  81              261L,
  82              293L,
  83              311L,
  84              100L,
  85              200L,
  86              440L,
  87              1000L,
  88              2000L
  89          };
  90          
  91          // Current Frequency Selection
  92          #define NUM_VOICES 2
  93          #define EMPTY 100
  94          static uint8_t currentFreqIndex[NUM_VOICES] = {EMPTY};
  95          static uint8_t countPressed = 0;
  96          
  97          // Phase offset (updated when frequency is changed)
  98          static uint16_t phaseOffset[NUM_VOICES] = {0};
  99          
 100          
 101          ///////////////////////////////////////////////////////////////////////////////
 102          // Supporting Functions
 103          ///////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 3   

 104          
 105          //-----------------------------------------------------------------------------
 106          // transitionDemoWaveform
 107          //-----------------------------------------------------------------------------
 108          //
 109          // Change function/waveform.
 110          // Left  - change function order: sine < square < triangle < sawtooth < windowed sine
 111          // Right - change function order: sine > square > triangle > sawtooth > windowed sine
 112          //
 113          // dir - valid arguments are: JOYSTICK_E, JOYSTICK_W
 114          //
 115          static void transitionDemoWaveform(uint8_t dir)
 116          {
 117   1        if (dir == JOYSTICK_E)
 118   1        {
 119   2          switch (currentDemoState)
 120   2          {
 121   3          case DEMO_SINE:
 122   3            currentDemoState = DEMO_SQUARE;
 123   3            currentWaveform = square_bits;
 124   3            currentTable = squareTable;
 125   3            break;
 126   3      
 127   3          case DEMO_SQUARE:
 128   3            currentDemoState = DEMO_TRIANGLE;
 129   3            currentWaveform = triangle_bits;
 130   3            currentTable = triangleTable;
 131   3            break;
 132   3      
 133   3          case DEMO_TRIANGLE:
 134   3                currentDemoState = DEMO_SAWTOOTH;
 135   3            currentWaveform = sawtooth_bits;
 136   3            currentTable = sawtoothTable;
 137   3            break;
 138   3      
 139   3          case DEMO_SAWTOOTH:
 140   3            currentDemoState = DEMO_WINDOWED_SINE;
 141   3            currentWaveform = windowed_sine_bits;
 142   3            currentTable = windowedSineTable;
 143   3            break;
 144   3      
 145   3          case DEMO_WINDOWED_SINE:
 146   3            currentDemoState = DEMO_SINE;
 147   3            currentWaveform = sine_bits;
 148   3            currentTable = sineTable;
 149   3            break;
 150   3          }
 151   2        }
 152   1        else if (dir == JOYSTICK_W)
 153   1        {
 154   2          switch (currentDemoState)
 155   2          {
 156   3          case DEMO_SINE:
 157   3            currentDemoState = DEMO_WINDOWED_SINE;
 158   3            currentWaveform = windowed_sine_bits;
 159   3            currentTable = windowedSineTable;
 160   3            break;
 161   3      
 162   3          case DEMO_SQUARE:
 163   3            currentDemoState = DEMO_SINE;
 164   3            currentWaveform = sine_bits;
 165   3            currentTable = sineTable;
 166   3            break;
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 4   

 167   3      
 168   3          case DEMO_TRIANGLE:
 169   3            currentDemoState = DEMO_SQUARE;
 170   3            currentWaveform = square_bits;
 171   3            currentTable = squareTable;
 172   3            break;
 173   3      
 174   3          case DEMO_SAWTOOTH:
 175   3            currentDemoState = DEMO_TRIANGLE;
 176   3            currentWaveform = triangle_bits;
 177   3            currentTable = triangleTable;
 178   3            break;
 179   3      
 180   3          case DEMO_WINDOWED_SINE:
 181   3            currentDemoState = DEMO_SAWTOOTH;
 182   3            currentWaveform = sawtooth_bits;
 183   3            currentTable = sawtoothTable;
 184   3            break;
 185   3          }
 186   2        }
 187   1      }
 188          
 189          //-----------------------------------------------------------------------------
 190          // getJoystick
 191          //-----------------------------------------------------------------------------
 192          //
 193          // Get new ADC sample and return joystick direction. Valid return values:
 194          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 195          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 196          //
 197          static uint8_t getJoystick(void)
 198          {
 199   1        uint32_t mv;
 200   1        uint8_t dir;
 201   1      
 202   1        ADC0CN0_ADBUSY = 1;
 203   1        while (!ADC0CN0_ADINT);
 204   1        ADC0CN0_ADINT = 0;
 205   1      
 206   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
 207   1      
 208   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 209   1      
 210   1        return dir;
 211   1      }
 212          
 213          //-----------------------------------------------------------------------------
 214          // getWaitJoystick
 215          //-----------------------------------------------------------------------------
 216          //
 217          // Get joystick input. If joystick was moved, wait for release. Return joystick
 218          // direction. Valid return values:
 219          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 220          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 221          //
 222          static uint8_t getWaitJoystick(void)
 223          {
 224   1        uint8_t dir, dirSave;
 225   1      
 226   1        dir = getJoystick();
 227   1        dirSave = dir;
 228   1      
 229   1        // wait for release then transition
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 5   

 230   1        while (dir != JOYSTICK_NONE)
 231   1        {
 232   2          dir = getJoystick();
 233   2        }
 234   1      
 235   1        return dirSave;
 236   1      }
 237          
 238          
 239          static void clear(){
 240   1        uint8_t i;
 241   1      
 242   1        for (i = 0; i < NUM_VOICES; i++){
 243   2            currentFreqIndex[i] = EMPTY;
 244   2            phaseOffset[i] = 0;
 245   2        }
 246   1      
 247   1        countPressed = 0;
 248   1      }
 249          
 250          
 251          static void processInput(uint8_t dir)
 252          {
 253   1        uint8_t i;
 254   1      
 255   1        if ((dir == JOYSTICK_E) || (dir == JOYSTICK_W))
 256   1          {
 257   2            transitionDemoWaveform(dir);
 258   2          }
 259   1      
 260   1        //check current pressed keys
 261   1        for (i = 0; i < NUM_VOICES; i++){
 262   2            switch (currentFreqIndex[i]){
 263   3              case 0 :
 264   3                if (C1) clear(); break;
 265   3              case 1 :
 266   3                if (D) clear(); break;
 267   3              case 2 :
 268   3                if (Ds) clear(); break;
 269   3              default:
 270   3                break;
 271   3            }
 272   2        }
 273   1      
 274   1      
 275   1        //check each key for pressed
 276   1      
 277   1        if (countPressed < NUM_VOICES){
 278   2          uint8_t flag = 0;
 279   2          if (!C1){
 280   3              for (i = 0; i < NUM_VOICES; i++){
 281   4                  if (currentFreqIndex[i] == 0) flag = 1;
 282   4              }
 283   3              if (!flag){
 284   4                currentFreqIndex[countPressed] = 0;
 285   4                phaseOffset[countPressed] = frequency[currentFreqIndex[countPressed++]] * PHASE_PRECISION / SAMP
             -LE_RATE_DAC;
 286   4              }
 287   3              flag = 0;
 288   3          }
 289   2          if (!D){
 290   3              for (i = 0; i < NUM_VOICES; i++){
 291   4                        if (currentFreqIndex[i] == 1) flag = 1;
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 6   

 292   4                    }
 293   3              if (!flag){
 294   4              currentFreqIndex[countPressed] = 1;
 295   4              phaseOffset[countPressed] = frequency[currentFreqIndex[countPressed++]] * PHASE_PRECISION / SAMPLE
             -_RATE_DAC;
 296   4              }
 297   3              flag = 0;
 298   3            }
 299   2          if (!Ds){
 300   3              for (i = 0; i < NUM_VOICES; i++){
 301   4                        if (currentFreqIndex[i] == 2) flag = 1;
 302   4                    }
 303   3              if (!flag){
 304   4                currentFreqIndex[countPressed] = 2;
 305   4                phaseOffset[countPressed] = frequency[currentFreqIndex[countPressed++]] * PHASE_PRECISION / SAMP
             -LE_RATE_DAC;
 306   4              }
 307   3            }
 308   2        }
 309   1      
 310   1      
 311   1      
 312   1      }
 313          
 314          
 315          ///////////////////////////////////////////////////////////////////////////////
 316          // Interrupt Service Routines
 317          ///////////////////////////////////////////////////////////////////////////////
 318          
 319          SI_INTERRUPT_USING(TIMER4_ISR, TIMER4_IRQn, 1)
 320          {
 321   1        static uint16_t phaseAcc[NUM_VOICES] = {0};       // Holds phase accumulator
 322   1        uint8_t i;
 323   1      
 324   1        SI_UU16_t temp;   // The temporary value that holds
 325   1                          // value before being written
 326   1                          // to the DAC
 327   1        
 328   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 329   1      
 330   1        temp.u16 = 0;
 331   1        for (i = 0; i < NUM_VOICES; i++){
 332   2            phaseAcc[i] += phaseOffset[i];            // Increment phase accumulator
 333   2            // Read the table value
 334   2            temp.u16 += currentTable[phaseAcc[i] >> 8];
 335   2        }
 336   1      
 337   1        temp.u16 /= countPressed;
 338   1      
 339   1      
 340   1        // Set the value of <temp> to the next output of DAC at full-scale
 341   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 342   1        // written first.
 343   1        SFRPAGE = PG4_PAGE;
 344   1      
 345   1      
 346   1        DAC3L = DAC2L = DAC1L = DAC0L = temp.u8[LSB];
 347   1        DAC3H = DAC2H = DAC1H = DAC0H = temp.u8[MSB];
 348   1      }
 349          
 350          ///////////////////////////////////////////////////////////////////////////////
 351          // Driver Function
 352          ///////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/25/2022 14:51:00 PAGE 7   

 353          
 354          void FunctionGenerator_main(void)
 355          {
 356   1        while(1)
 357   1        {
 358   2          processInput(getWaitJoystick());
 359   2        }
 360   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    777    ----
   CONSTANT SIZE    =   8218    ----
   XDATA SIZE       =     16    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
