C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src\function_generator.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\markh\O
                    -neDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\src\function_generator.c OMF2 SMALL DEBUG OBJECTEXTEND ROM
                    -(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\mar
                    -kh\OneDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\inc;C:\Users\markh\OneDrive\Documents\Uni\4th Year\Eng
                    -\EE4\LaserBee\LaserBeeAudio\inc\config;C:\Users\markh\OneDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\inc
                    -\graphics;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8LB1/peripheral_driver/inc;C:/Silicon
                    -Labs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_joystick;C:/SiliconLabs/SimplicityStudio/v
                    -5/developer/sdks/8051/v4.2.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/EFM8LB
                    -1_SLSTK2030A/config;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_retargetseri
                    -al;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStud
                    -io/v5/developer/sdks/8051/v4.2.3//Device/EFM8LB1/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits
                    -/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/e
                    -fm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_memo
                    -ry_lcd/inc/config) PRINT(.\src\function_generator.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\function_generato
                    -r.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          ///////////////////////////////////////////////////////////////////////////////
   7          // function_generator.c
   8          ///////////////////////////////////////////////////////////////////////////////
   9          
  10          ///////////////////////////////////////////////////////////////////////////////
  11          // Call Graph
  12          //
  13          // FunctionGenerator_main()
  14          //  |
  15          //  +- drawSplash()
  16          //  |   +- getWaitJoystick()
  17          //  |   |   +- getJoystick()
  18          //  |
  19          //  +- drawStaticSprites()
  20          //  |   +- drawScreenSprite()
  21          //  |
  22          //  +- processInput()
  23          //  |   +- transitionDemoWaveform()
  24          //  |   +- transitionDemoFrequency()
  25          //  |
  26          //  +- drawScreen()
  27          //  |   +- drawScreenWaveform()
  28          //  |   +- drawScreenFrequency()
  29          //  |       +- drawScreenText()
  30          //  |
  31          //  +- synchFrame()
  32          //
  33          // Timer4_ISR()
  34          //
  35          // PORTMATCH_ISR()
  36          //
  37          
  38          ///////////////////////////////////////////////////////////////////////////////
  39          // Includes
  40          ///////////////////////////////////////////////////////////////////////////////
  41          
  42          #include "bsp.h"
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 2   

  43          #include "tick.h"
  44          #include "render.h"
  45          #include "joystick.h"
  46          #include "thinfont.h"
  47          #include "function_generator.h"
  48          #include "sine.h"
  49          #include "square.h"
  50          #include "triangle.h"
  51          #include "sawtooth.h"
  52          #include "windowed_sine.h"
  53          #include "nav_up.h"
  54          #include "nav_down.h"
  55          #include "nav_left.h"
  56          #include "nav_right.h"
  57          #include "waveform_tables.h"
  58          #include "retargetserial.h"
  59          
  60          
  61          ///////////////////////////////////////////////////////////////////////////////
  62          // Globals
  63          ///////////////////////////////////////////////////////////////////////////////
  64          
  65          // Pins
  66          SI_SBIT(IN1, SFR_P1, 4);                  // P1.4 IN1
  67          //SI_SBIT(IN2, SFR_P1, 5);                  // P1.5 IN2
  68          //SI_SBIT(IN3, SFR_P1, 6);                  // P1.6 IN3
  69          
  70          // Demo state variables
  71          static DemoState currentDemoState = DEMO_SINE;
  72          static SI_VARIABLE_SEGMENT_POINTER(currentTable, uint16_t, const SI_SEG_CODE) = sineTable; // current wave
             -form table for DAC output
  73          static SI_VARIABLE_SEGMENT_POINTER(currentWaveform, uint8_t, const SI_SEG_CODE) = sine_bits; // current wa
             -veform picture
  74          
  75          // Frequency selection
  76          #define SUPPORTED_NUM_FREQ 8
  77          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  78              10L,
  79              20L,
  80              50L,
  81              100L,
  82              200L,
  83              440L,
  84              1000L,
  85              2000L
  86          };
  87          
  88          // Current Frequency Selection
  89          static uint8_t currentFreqIndex = 3;
  90          
  91          // Phase offset (updated when frequency is changed)
  92          static uint16_t phaseOffset1 = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  93          //static uint16_t phaseOffset2 = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  94          //static uint16_t new_freq = 440;
  95          
  96          ///////////////////////////////////////////////////////////////////////////////
  97          // Supporting Functions
  98          ///////////////////////////////////////////////////////////////////////////////
  99          
 100          //-----------------------------------------------------------------------------
 101          // transitionDemoWaveform
 102          //-----------------------------------------------------------------------------
 103          //
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 3   

 104          // Change function/waveform.
 105          // Left  - change function order: sine < square < triangle < sawtooth < windowed sine
 106          // Right - change function order: sine > square > triangle > sawtooth > windowed sine
 107          //
 108          // dir - valid arguments are: JOYSTICK_E, JOYSTICK_W
 109          //
 110          static void transitionDemoWaveform(uint8_t dir)
 111          {
 112   1        if (dir == JOYSTICK_E)
 113   1        {
 114   2          switch (currentDemoState)
 115   2          {
 116   3          case DEMO_SINE:
 117   3            currentDemoState = DEMO_SQUARE;
 118   3            currentWaveform = square_bits;
 119   3            currentTable = squareTable;
 120   3            break;
 121   3      
 122   3          case DEMO_SQUARE:
 123   3            currentDemoState = DEMO_TRIANGLE;
 124   3            currentWaveform = triangle_bits;
 125   3            currentTable = triangleTable;
 126   3            break;
 127   3      
 128   3          case DEMO_TRIANGLE:
 129   3                currentDemoState = DEMO_SAWTOOTH;
 130   3            currentWaveform = sawtooth_bits;
 131   3            currentTable = sawtoothTable;
 132   3            break;
 133   3      
 134   3          case DEMO_SAWTOOTH:
 135   3            currentDemoState = DEMO_WINDOWED_SINE;
 136   3            currentWaveform = windowed_sine_bits;
 137   3            currentTable = windowedSineTable;
 138   3            break;
 139   3      
 140   3          case DEMO_WINDOWED_SINE:
 141   3            currentDemoState = DEMO_SINE;
 142   3            currentWaveform = sine_bits;
 143   3            currentTable = sineTable;
 144   3            break;
 145   3          }
 146   2        }
 147   1        else if (dir == JOYSTICK_W)
 148   1        {
 149   2          switch (currentDemoState)
 150   2          {
 151   3          case DEMO_SINE:
 152   3            currentDemoState = DEMO_WINDOWED_SINE;
 153   3            currentWaveform = windowed_sine_bits;
 154   3            currentTable = windowedSineTable;
 155   3            break;
 156   3      
 157   3          case DEMO_SQUARE:
 158   3            currentDemoState = DEMO_SINE;
 159   3            currentWaveform = sine_bits;
 160   3            currentTable = sineTable;
 161   3            break;
 162   3      
 163   3          case DEMO_TRIANGLE:
 164   3            currentDemoState = DEMO_SQUARE;
 165   3            currentWaveform = square_bits;
 166   3            currentTable = squareTable;
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 4   

 167   3            break;
 168   3      
 169   3          case DEMO_SAWTOOTH:
 170   3            currentDemoState = DEMO_TRIANGLE;
 171   3            currentWaveform = triangle_bits;
 172   3            currentTable = triangleTable;
 173   3            break;
 174   3      
 175   3          case DEMO_WINDOWED_SINE:
 176   3            currentDemoState = DEMO_SAWTOOTH;
 177   3            currentWaveform = sawtooth_bits;
 178   3            currentTable = sawtoothTable;
 179   3            break;
 180   3          }
 181   2        }
 182   1      }
 183          
 184          //-----------------------------------------------------------------------------
 185          // transitionDemoFrequency
 186          //-----------------------------------------------------------------------------
 187          //
 188          // Change frequency of the function.
 189          // Up   - increase frequency
 190          // Down - decrease frequency
 191          //
 192          // dir - valid arguments are: JOYSTICK_N, JOYSTICK_S
 193          //
 194          static void transitionDemoFrequency(uint8_t dir)
 195          {
 196   1        if (dir == JOYSTICK_N)
 197   1        {
 198   2          // increase freq
 199   2          if(currentFreqIndex == SUPPORTED_NUM_FREQ-1)
 200   2          {
 201   3            currentFreqIndex = 0;
 202   3          }
 203   2          else
 204   2          {
 205   3            currentFreqIndex++;
 206   3          }
 207   2        }
 208   1        else if (dir == JOYSTICK_S)
 209   1        {
 210   2          // decrease freq
 211   2          if (currentFreqIndex == 0)
 212   2          {
 213   3            currentFreqIndex = SUPPORTED_NUM_FREQ-1;
 214   3          }
 215   2          else
 216   2          {
 217   3            currentFreqIndex--;
 218   3          }
 219   2        }
 220   1      
 221   1        phaseOffset1 = frequency[currentFreqIndex] * PHASE_PRECISION / SAMPLE_RATE_DAC;
 222   1        //new_freq = frequency[currentFreqIndex] * 1.26;
 223   1        //phaseOffset2 = (new_freq) * PHASE_PRECISION / SAMPLE_RATE_DAC;
 224   1      }
 225          
 226          //-----------------------------------------------------------------------------
 227          // getJoystick
 228          //-----------------------------------------------------------------------------
 229          //
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 5   

 230          // Get new ADC sample and return joystick direction. Valid return values:
 231          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 232          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 233          //
 234          static uint8_t getJoystick(void)
 235          {
 236   1        uint32_t mv;
 237   1        uint8_t dir;
 238   1      
 239   1        ADC0CN0_ADBUSY = 1;
 240   1        while (!ADC0CN0_ADINT);
 241   1        ADC0CN0_ADINT = 0;
 242   1      
 243   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
 244   1      
 245   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 246   1      
 247   1        return dir;
 248   1      }
 249          
 250          //-----------------------------------------------------------------------------
 251          // getWaitJoystick
 252          //-----------------------------------------------------------------------------
 253          //
 254          // Get joystick input. If joystick was moved, wait for release. Return joystick
 255          // direction. Valid return values:
 256          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 257          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 258          //
 259          static uint8_t getWaitJoystick(void)
 260          {
 261   1        uint8_t dir, dirSave;
 262   1      
 263   1        dir = getJoystick();
 264   1        dirSave = dir;
 265   1      
 266   1        // wait for release then transition
 267   1        while (dir != JOYSTICK_NONE)
 268   1        {
 269   2          dir = getJoystick();
 270   2        }
 271   1      
 272   1        return dirSave;
 273   1      }
 274          
 275          //-----------------------------------------------------------------------------
 276          // getJoystickDemo
 277          //-----------------------------------------------------------------------------
 278          //
 279          // Get and process joystick input.
 280          // Left/Right = change function/waveform
 281          // Up/Down    = change frequency
 282          //
 283          static void processInput(uint8_t dir)
 284          {
 285   1        // process input
 286   1        //if ((dir == JOYSTICK_E) || (dir == JOYSTICK_W))
 287   1        //{
 288   1        //  transitionDemoWaveform(dir);
 289   1        //}
 290   1        //else if ((dir == JOYSTICK_N) || (dir == JOYSTICK_S))
 291   1        //{
 292   1        //  transitionDemoFrequency(dir);
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 6   

 293   1        //}
 294   1      
 295   1        if (IN1 == 1){
 296   2            currentFreqIndex = 0;
 297   2            phaseOffset1 = frequency[currentFreqIndex] * PHASE_PRECISION / SAMPLE_RATE_DAC;
 298   2        }
 299   1        else if (IN1 == 0){
 300   2            currentFreqIndex = 1;
 301   2            phaseOffset1 = frequency[currentFreqIndex] * PHASE_PRECISION / SAMPLE_RATE_DAC;
 302   2        }
 303   1        else{
 304   2            phaseOffset1 = 0;
 305   2            //phaseOffset2 = 0;
 306   2        }
 307   1      }
*** WARNING C280 IN LINE 283 OF C:\Users\markh\OneDrive\Documents\Uni\4th Year\Eng\EE4\LaserBee\LaserBeeAudio\src\functi
             -on_generator.c: 'dir': unreferenced local variable
 308          
 309          
 310          ///////////////////////////////////////////////////////////////////////////////
 311          // Interrupt Service Routines
 312          ///////////////////////////////////////////////////////////////////////////////
 313          
 314          SI_INTERRUPT_USING(TIMER4_ISR, TIMER4_IRQn, 1)
 315          {
 316   1        static uint16_t phaseAcc1 = 0;       // Holds phase accumulator
 317   1        //static uint16_t phaseAcc2 = 0;       // Holds phase accumulator
 318   1      
 319   1        SI_UU16_t temp;   // The temporary value that holds
 320   1                          // value before being written
 321   1                          // to the DAC
 322   1        
 323   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 324   1      
 325   1        phaseAcc1 += phaseOffset1;            // Increment phase accumulator
 326   1        //phaseAcc2 += phaseOffset2;            // Increment phase accumulator
 327   1      
 328   1        // Read the table value
 329   1        temp.u16 = currentTable[phaseAcc1 >> 8];
 330   1      
 331   1        // Set the value of <temp> to the next output of DAC at full-scale
 332   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 333   1        // written first.
 334   1      
 335   1        SFRPAGE = PG4_PAGE;
 336   1      
 337   1        DAC3L = DAC2L = DAC1L = DAC0L = temp.u8[LSB];
 338   1        DAC3H = DAC2H = DAC1H = DAC0H = temp.u8[MSB];
 339   1      }
 340          
 341          //-----------------------------------------------------------------------------
 342          // PMATCH_ISR
 343          //-----------------------------------------------------------------------------
 344          //
 345          // The Port Match interrupt occurs whenever (Pn & PnMASK) != (PnMAT & PnMASK).
 346          // We must disable the interrupt and wait until the button is released in
 347          // main, or else the interrupt will trigger multiple times.  It is generally
 348          // not good practice to sit in an ISR for int32_t periods of time.
 349          //
 350          SI_INTERRUPT(PMATCH_ISR, PMATCH_IRQn)
 351          {
 352   1        uint8_t SFRPAGE_save = SFRPAGE;
 353   1      
C51 COMPILER V9.60.0.0   FUNCTION_GENERATOR                                                01/22/2022 19:49:48 PAGE 7   

 354   1        SFRPAGE = PG2_PAGE;
 355   1      
 356   1        EIE1 &= ~0x02;                     // Disable Port Match interrupts to
 357   1                                           // prevent multiple interrupts from
 358   1                                           // occurring while the button is
 359   1                                           // pressed
 360   1        SFRPAGE = SFRPAGE_save;
 361   1      }
 362          
 363          ///////////////////////////////////////////////////////////////////////////////
 364          // Driver Function
 365          ///////////////////////////////////////////////////////////////////////////////
 366          
 367          void FunctionGenerator_main(void)
 368          {
 369   1      
 370   1        while(1)
 371   1        {
 372   2          processInput(getWaitJoystick());
 373   2        }
 374   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    454    ----
   CONSTANT SIZE    =   8218    ----
   XDATA SIZE       =     16    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
